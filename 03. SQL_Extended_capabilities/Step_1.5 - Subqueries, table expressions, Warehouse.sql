USE stock;

/*Step_1.5.3 - Вывести информацию о тех книгах, цена которых меньше самой маленькой средней цены книги каждого автора. 
Среднее вычислить как общая стоимость экземпляров книг каждого автора, деленная на общее количество экземпляров книг того же автора. 
Столбцы назвать Книга, Автор, Цена. 
Информацию отсортировать сначала по названию книг в алфавитном порядке, а затем по убыванию цены.*/

/*Для лучшего усвоения материала в каждом задании я буду делать по 2 варианта решения, т.к. на данный момент,
для меня вложенные запросы - не то, чтобы сложная тема. Она скорее тяжело в голове укладывается*/


/*Первый вариант решения. Долгий, но позволяет понять весь механизм необходимого нам вычисления. С помощью нескольких вложенных запросов.*/

SELECT title Книга , author Автор , price Цена
FROM book
WHERE price < (#Первый вложенный запрос для получанея минимальной цены.
				SELECT MIN(avg_price)
                FROM (# Второй вложенный запрос, для формирования новой таблицы средних значений
					SELECT SUM(price*amount) / SUM(amount) avg_price
					FROM book
                    GROUP BY author) query_in)
ORDER BY 1, 3 DESC;

/*Второй вариант решения, с помощью ALL. Мы можем получить минимальное значение из всех значений*/
SELECT title Книга , author Автор , price Цена
FROM book
WHERE price < ALL(SELECT SUM(price*amount) / SUM(amount) avg_price
					FROM book
                    GROUP BY author)
ORDER BY 1, 3 DESC;
                    
/*Step_1.5.4 - Вывести информацию о тех книгах, цена которых больше самой маленькой средней цены книги каждого автора. 
Среднее вычислить как общая стоимость книг каждого автора, деленная на общее количество книг того же автора. 
Столбцы назвать Книга, Автор, Цена. 
Информацию отсортировать сначала по названию книг в алфавитном порядке, а затем по убыванию цены.

По сути мы просто должны модифицировать предыдущий запрос с помощью ANY. Но я его перепишу, для улучшения скилла*/

/*Первый способ с помощью вложенных запросов*/
SELECT title Книга , author Автор , price Цена
FROM book
WHERE price > (#Первый вложенный запрос для получения самаой маленькой цены
				SELECT MIN(avg_price)
                FROM (#Второй запрос, в котором формируем таблицы со средними значениями цен
						SELECT SUM(price*amount) / SUM(amount) avg_price
                        FROM book
                        GROUP BY author) query_in)
ORDER BY 1, 3 DESC;

/*Второй способ с помощью ANY. Почему эни. Просто надо запомнить, что Больше самого маленького*/

SELECT title Книга , author Автор , price Цена
FROM book
WHERE price > ANY(SELECT SUM(price*amount) / SUM(amount) avg_price
					FROM book
                    GROUP BY author)
ORDER BY 1, 3 DESC;

/*Step_1.5.5 - Составить рейтинг книг в зависимости от того, какая книга принесет больше всего выручки (в процентах), при условии продажи всех книг. 
Выручка в процентах вычисляется как стоимость всех экземпляров книги деленная на суммарную стоимость всех экземпляров книг на складе и умноженное на 100. 
Полученное значение округлить до двух знаков после запятой. 
Вывести автора, название книги, цена, количество и выручка в процентах. 
Последний столбец назвать income_percent. Информацию отсортировать по убыванию выручки.

При решении задания используйте вложенный запрос.*/


/*Для начала сформируем запрос для получения выручки.
Оказалось, что сформировав данный вложенный запрос я решил задачу.
После него осталось просто добавить необходимые столбцы*/

#запрос получения выручки
SELECT 
	author, 
    title, 
    price, 
    amount,
    ROUND(SUM(price*amount) / (SELECT SUM(price*amount) FROM book) *100, 2) income_percent
FROM book
GROUP BY author, title
ORDER BY income_percent DESC;

/*Почему то данное решение принимается, а решение выше - нет. Надо будет отдельно разобраться. 
В MySQL запрос работает корректно*/
SELECT 
	author, 
    title, 
    price, 
    amount,
    ROUND((price*amount) / (SELECT SUM(price*amount) FROM book) *100, 2) income_percent
FROM book
ORDER BY income_percent DESC;
1


